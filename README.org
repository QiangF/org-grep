#+TITLE: org-grep â€” Kind of M-x rgrep adapted for Org mode

This tool allows for grepping files in a set of Org directories,
formatting the results as a separate Org buffer.  This buffer is
assorted with a few specific navigation commands so it works a bit
like =M-x rgrep=.

** Installation

To install *org-grep*, just copy =org-grep.el= somewhere Emacs may
find it.  Optionally, assign some key binding to toggle the mode.  For
one, I added these lines to my =~/.emacs= file:

  #+BEGIN_SRC elisp
    (autoload 'org-grep "org-grep" nil t)
    (define-key org-mode-map "\C-cog" 'org-grep)
  #+END_SRC

yet of course, one may choose any other key binding.

** Usage

Two Emacs variables may be set prior to, or after loading *org-grep*.
These are:

  - org-grep-directories :: This is a list of directories which the
       *org-grep* command recursively searches.  When *nil*, which is the
       default, the command searches within the hierarchy identified
       by the Org standard *org-directory* variable.
  - org-grep-extensions :: This is a list of file extensions to retain
       for the search, including the leading period.  The default is a
       list containing the =.org= string as its sole member.  If set to
       *nil*, all files are going to be searched, whatever their
       extension may be.

To use this tool, either call =M-x org-grep= or the keybinding put aside
for it, and reply to the =Org grep?= prompt with a regular expression to
search for.  Happily enough, Emacs and the *grep* command use similar
syntax for regular expressions.

Be well aware that all currently opened files in Emacs are
automatically saved to disk before that command gets executed.

This will create an Org buffer with the found lines, each preceded by
the base name of the file containing the line, and the line number
within that file.  The buffer is read-only, but standard Org commands
which do not modify the buffer apply, including of course those able
to follow links.  A few extra commands are also available:

  - C-c C-c :: For the search hit as identified by the position of the
               cursor, open the corresponding original file (unless it
               is already visited, of course), make it the current
               window, with the cursor left on that line.
  - C-x ` :: Move to the next search hit, open the corresponding
             original file, make it the current window, with the
             cursor left on the original found line.
  - . :: For the search hit as identified by the position of the
         cursor, open the corresponding original file with the cursor
         positioned on the original found line.  Leave the cursor
         within the search results window (but see [[Caveats]] below).
  - n :: Move to the next search hit, open the corresponding original
         file with the cursor positioned on the original found line.
         Leave the cursor within the search results window (but see
         [[Caveats]] below).
  - p :: Move to the previous search hit, open the corresponding
         original file with the cursor positioned on the original
         found line.  Leave the cursor within the search results
         window (but see [[Caveats]] below).
  - g :: Save all modified files to disk, then refresh the search hit
         buffer from the actual contents of the disk files.

** Purpose, history

Switching to Org, I immediately populated hundreds of Org files with
data previously accumulated either as *allout* files, Tomboy notes or
Workflowy items.  The standard Org mechanics for searching a
collection files requires them to be put under the control of the Org
agenda.  Given my volume of notes, Org mode was crawling, so I
had to quickly develop some other mean for searching.

The first =org-grep= I wrote was based on Emacs standard =M-x rgrep=,
using hooks and other tricky machinery so it works the way I wanted.
But =M-x rgrep= is limited to a single directory, and the =*grep*= buffer
does not render Org lines as nicely as Org mode does.  This became
critical for some long Org lines using a lot of heavy markup.

So I rewrote =org-grep= so the resulting output is a genuine Org file,
which looks like a cleaner and easier way to proceed.

** Caveats

*org-grep* works relatively OK for me, yet a few problems remain.  Here
are those I'm aware of:

- The cursor does not come back into the resulting buffer, for some
  navigation commands meant so it does.

- Navigation commands should reveal the goal line in the original Org
  buffer containing the grep hit, but the line stays collapsed and
  hidden.

- The search string may not be always highlighted in the resulting
  buffer, depending on its capitalization.  This is because
  =case-fold-search= is ignored by the highlighting mechanism in Emacs.
  The first letter of the pattern is recognized in both cases, this
  slightly alleviates the problem, this does not work for letters
  outside ASCII.

- It would be nice to highlight the search pattern in the original Org
  buffers containing grep hits.
